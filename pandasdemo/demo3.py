# 选择 、缺失值处理
import pandas as pd
import numpy as np

dates = pd.date_range('20130101',periods=6)
print(dates)
df = pd.DataFrame(np.random.randn(6,4),index=dates,columns=list('ABCD'))

# 1获取
# 1.1 选择一个单独的列，这将会返回一个Series，等同于df.A
print(df['A'])
print('=============================================')

# 1.2. 通过[]进行选择，这将会对行进行切片
print(df[0:3])
print(df['20130102':'20130104'])
print('=============================================')

# 2通过标签选择
# 2.1. 使用标签来获取一个交叉的区域
print(df.loc[dates[0]])
print('=============================================')

# 2.2 通过标签来在多个轴上进行选择
print(df.loc[:,['A','B']])
print('=============================================')

# 2.3. 标签切片
print(df.loc['20130102':'20130104',['A','B']])
print('=============================================')

# 2.4. 对于返回的对象进行维度缩减
print(df.loc['20130102',['A','B']])
print('=============================================')

# 2.5. 获取一个标量
print(df.loc[dates[0],'A'])
print('=============================================')

# 2.6 快速访问一个标量（与上一个方法等价）
print(df.at[dates[0],'A'])
print('=============================================')

# 3通过位置选择
# 3.1 通过传递数值进行位置选择（选择的是行）
print(df.iloc[3])
print('=============================================')

# 3.2 通过数值进行切片，与numpy/python中的情况类似
print(df.iloc[3:5,0:2])
print('=============================================')

# 3.3 通过指定一个位置的列表，与numpy/python中的情况类似
print(df.iloc[[1,2,4],[0,2]])
print('=============================================')

# 3.4 对行进行切片
print(df.iloc[1:3,:])
print('=============================================')

# 3.5 对列进行切片
print(df.iloc[:,1:3])
print('=============================================')

# 3.6 获取特定的值
print(df.iloc[1,1])
print('=============================================')

# 4布尔索引
# 4.1 使用一个单独列的值来选择数据
print(df[df.A > 0])
print('=============================================')

# 4.2 使用where操作来选择数据
print(df[df > 0])
print('=============================================')

# 4.3 使用isin()方法来过滤
df2 = df.copy()
df2['E'] = ['one','one','two','three','four','three']
print(df2)
print(df2[df2['E'].isin(['two','four'])])
print('=============================================')

# 5设置
# 5.1 设置一个新的列
s1 = pd.Series([1,2,3,4,5,6],index=pd.date_range('20130102',periods=6))
print(s1)

df['F'] = s1
print(df)
print('=============================================')

# 5.2 通过标签设置新的值
df.at[dates[0],'A'] = 0
print(df)
print('=============================================')

# 5.3 通过位置设置新的值
df.iat[0,1] = 0
print(df)
print('=============================================')

# 5.4 通过一个numpy数组设置一组新值
df.loc[:,'D'] = np.array([5] * len(df))
print(df)
print('=============================================')

# 5.5 通过where操作来设置新的值
df2 = df.copy()
df2[df2 > 0] = -df2
print(df2)
print('=============================================')

# ***********************************************
# 缺失值处理
# 1. reindex()方法可以对指定轴上的索引进行改变/增加/删除操作，这将返回原始数据的一个拷贝
df1 = df.reindex(index=dates[0:4],columns=list(df.columns) + ['E'])
df1.loc[dates[0]:dates[1],'E'] = 1
print(df1)

# 2. 去掉包含缺失值的行
df11 = df1.dropna(how='any')
print(df11)

# 3. 对缺失值进行填充
df11 = df1.fillna(value=5)
print(df11)

# 4. 对数据进行布尔填充
df11 = pd.isnull(df1)
print(df11)